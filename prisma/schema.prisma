// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  displayName      String   // Friendly name for the user
  email            String   @unique
  username         String   @unique
  password         String?  // Optional for Stremio-only users
  firstName        String?
  lastName         String?
  avatar           String?
  role             String   @default("USER") // Changed from UserRole enum
  isActive         Boolean  @default(true)
  
  // Stremio-specific fields
  stremioEmail     String?  @unique // Stremio account email
  stremioUsername  String?  // Stremio username
  stremioAuthKey   String?  // Encrypted Stremio auth token
  stremioUserId    String?  // Stremio user ID
  stremioAddons    String?  // Stremio addons data as JSON string
  lastStremioSync  DateTime? // Last time we synced with Stremio
  
  // User addon preferences
  excludedAddons   String?  // JSON array of excluded addon URLs
  protectedAddons  String?  // JSON array of protected addon URLs
  
  // User color
  colorIndex       Int?     // User's selected color index (1-5)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  memberships    GroupMember[]
  invitations    GroupInvite[]
  addonSettings  AddonSetting[]
  activityLogs   ActivityLog[]

  @@map("users")
}

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  avatar      String?
  colorIndex  Int?     // Group's selected color index (1-5)
  isActive    Boolean   @default(true)
  maxMembers  Int       @default(10)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  members      GroupMember[]
  invites      GroupInvite[]
  addons       GroupAddon[]
  activityLogs ActivityLog[]

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  role     String   @default("MEMBER") // Changed from GroupMemberRole enum
  joinedAt DateTime @default(now())
  // Membership-scoped exclusions
  excludedAddons String? // JSON array of excluded addon URLs for this group membership

  // Relationships
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupInvite {
  id        String   @id @default(cuid())
  email     String
  role      String   @default("MEMBER") // Changed from GroupMemberRole enum
  status    String   @default("PENDING") // Changed from GroupInviteStatus enum
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  groupId   String
  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviterId String
  inviter   User   @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([email, groupId])
  @@map("group_invites")
}

model Addon {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  manifestUrl     String   @unique
  stremioAddonId  String?  @unique // Stremio's internal addon ID
  iconUrl         String?
  version         String?
  author          String?
  tags            String   // Comma-separated tags: Stream, Catalog, Subtitles, Meta
  isOfficial      Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  groupAddons   GroupAddon[]
  addonSettings AddonSetting[]

  @@map("addons")
}

model GroupAddon {
  id        String   @id @default(cuid())
  isEnabled Boolean  @default(true)
  settings  String?  // Store addon-specific settings as JSON string
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  addonId String
  addon   Addon  @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@unique([groupId, addonId])
  @@map("group_addons")
}

model AddonSetting {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  addonId String
  addon   Addon  @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@unique([userId, addonId, key])
  @@map("addon_settings")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String   // Changed from ActivityAction enum
  details   String?
  metadata  String?  // Store metadata as JSON string
  createdAt DateTime @default(now())

  // Relationships
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String?
  group   Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

// Note: SQLite doesn't support enums, so we use String fields with constraints
// Valid values:
// User.role: "ADMIN", "USER"
// GroupMember.role: "ADMIN", "MODERATOR", "MEMBER"  
// GroupInvite.role: "ADMIN", "MODERATOR", "MEMBER"
// GroupInvite.status: "PENDING", "ACCEPTED", "DECLINED", "EXPIRED"
// ActivityLog.action: "USER_JOINED", "USER_LEFT", "ADDON_ADDED", "ADDON_REMOVED", "ADDON_CONFIGURED", "GROUP_CREATED", "GROUP_UPDATED", "INVITE_SENT", "INVITE_ACCEPTED"
