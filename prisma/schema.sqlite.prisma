generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  displayName      String
  email            String   @unique
  username         String   @unique
  password         String?
  firstName        String?
  lastName         String?
  avatar           String?
  role             String   @default("USER")
  isActive         Boolean  @default(true)
  stremioEmail     String?  @unique
  stremioUsername  String?
  stremioAuthKey   String?
  stremioUserId    String?
  stremioAddons    String?
  lastStremioSync  DateTime?
  excludedAddons   String?
  protectedAddons  String?
  colorIndex       Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  memberships      GroupMember[]
  invitations      GroupInvite[]
  addonSettings    AddonSetting[]
  activityLogs     ActivityLog[]

  @@map("users")
}

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  avatar      String?
  colorIndex  Int?
  isActive    Boolean   @default(true)
  maxMembers  Int       @default(10)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members      GroupMember[]
  invites      GroupInvite[]
  addons       GroupAddon[]
  activityLogs ActivityLog[]

  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  excludedAddons String?
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupInvite {
  id        String   @id @default(cuid())
  email     String
  role      String   @default("MEMBER")
  status    String   @default("PENDING")
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  groupId   String
  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviterId String
  inviter   User   @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([email, groupId])
  @@map("group_invites")
}

model Addon {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  manifestUrl     String   @unique
  stremioAddonId  String?  @unique
  iconUrl         String?
  version         String?
  author          String?
  tags            String
  isOfficial      Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  groupAddons   GroupAddon[]
  addonSettings AddonSetting[]

  @@map("addons")
}

model GroupAddon {
  id        String   @id @default(cuid())
  isEnabled Boolean  @default(true)
  settings  String?
  addedAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  addonId String
  addon   Addon  @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@unique([groupId, addonId])
  @@map("group_addons")
}

model AddonSetting {
  id        String   @id @default(cuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  addonId String
  addon   Addon  @relation(fields: [addonId], references: [id], onDelete: Cascade)

  @@unique([userId, addonId, key])
  @@map("addon_settings")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  details   String?
  metadata  String?
  createdAt DateTime @default(now())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String?
  group   Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@map("activity_logs")
}

model AppAccount {
  id           String   @id @default(cuid())
  uuid         String   @unique
  passwordHash String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastLoginAt  DateTime?

  @@map("app_accounts")
}


